# -*- coding: utf-8 -*-

# Labyrinth client.

from protocolBase import *
from message import *
import socket as s
import time, sys
PORT = 32323

class labyrinth:
    
    def __init__(self):
        conn = s.socket(s.AF_INET, s.SOCK_STREAM)
        conn.setsockopt(s.SOL_SOCKET, s.SO_REUSEADDR, 1)
        conn.connect(('localhost', PORT))
        
        fsock = conn.makefile()
        port = int(fsock.readline())
        # Set up protocol for message passing
        self.pb = protocolBase()
        # Beauty sleep
        time.sleep(0.1)
        self.pb.connect('localhost', port)
        
    # Interface for navigating the labyrinth
    def north(self):
        """ Sending request to server to go north. """
        self.send("north")
        msg = self.recv()
        
        return [msg.get(0), msg.get(1), msg.get(2)]
        
    def south(self):
        """ Sending request to server to go south. """
        self.send("south")
        msg = self.recv()
            
        return [msg.get(0), msg.get(1), msg.get(2)]
    
    def east(self):
        """ Sending request to server to go east. """
        self.send("east")
        msg = self.recv()
            
        return [msg.get(0), msg.get(1), msg.get(2)]
    
    def west(self):
        """ Sending request to server to go west. """
        self.send("west")
        msg = self.recv()
            
        return [msg.get(0), msg.get(1), msg.get(2)]
    
    def look(self):
        """ Sending request to server to look around.
            Recieves status of adjacent tiles from server. """
        self.send("look")
        msg = self.recv() 
        
        msg_tokens = []
        tiles = []
        
        for i in range(msg.size()):
            msg_tokens.append(msg.get(i))
        for tok in msg_tokens:
            tiles.append(tok.split("|"))
        
        return tiles
    
    def disarm(self, direction):
        """ Sending request to disarm an adjacent trap. """
        self.send("disarm " + direction)
        msg = self.recv() 

        return msg.get(0)
    
    def fire(self):
        self.send("fire")
        msg = self.recv() 

        return msg.get(0)
    
    def inventory(self):
        self.send("inventory")
        msg = self.recv() 

        return int(msg.get(0))
    
    # Methods for communicating with the server
    # Nevermind these.
        
    def send(self, op):
        """ Sends the given operation to the server. """
        tokens = op.split()
        msg = message()
        for token in tokens:    
            msg.add(token)
        self.pb.send(msg)
        
    def recv(self):
        """ Recieves a response from the server. """
        msg = self.pb.recv()
        
        if msg.get(0) == "timeout":
            print "You failed to find Toby before the time ran out!"
            self.cleanup()
        elif msg.get(0) == "toby":
            print "You found Toby. Good job!"
            self.cleanup()
        elif msg.get(0) == "dead":
            print "You died!"
            self.cleanup()
        
        return msg
    
    # Cleanup
    def cleanup(self):
        """ Close connections and notify server that session is over. """
        self.pb.cleanup()
        sys.exit()
    

class Solver(object):
	'''
	A class to solve the maze, i.e. trying to find Toby in the labyrinth
	'''
	def __init__(self):
		self.visitlist = []
		self.superstack = []
		self.x = 0
		self.y = 0
		self.currentVertex = (self.x, self.y)
		self.foundToby = False
		
	def findEdges(self, legalDir):
		'''
		A function that determines if we've found Toby or not. Returns 1 if Toby is found
		'''
		
		if 'toby' in legalDir[0][1]:
			lab.north()
			self.foundToby = True
		if 'toby' in legalDir[1][1]:
			lab.south()
			self.foundToby = True
		if 'toby' in legalDir[2][1]:
			lab.west()
			self.foundToby = True
		if 'toby' in legalDir[3][1]:
			lab.east()
			self.foundToby = True
			
			

		
	
		
	def movement(self):
		'''
		The function that implements the movement of Sara, which cardinal direction to go next, and when to backtrack
		'''
		
		
		self.visitlist.append(self.currentVertex)

		
		while self.foundToby == False:
			legalDir = lab.look()

			#We can go south and the tile is not visited
			if legalDir[1][1] == 'tile' and (self.x, self.y-1) not in self.visitlist:
				self.y -= 1
				self.currentVertex = (self.x, self.y)
				self.visitlist.append(self.currentVertex)
				self.superstack.append('north')
				self.findEdges(legalDir)
				lab.south()
				
			#We can go north and the tile is not visited
			elif legalDir[0][1] == 'tile' and (self.x, self.y+1) not in self.visitlist:
				self.y += 1
				self.currentVertex = (self.x, self.y)
				self.superstack.append('south')
				self.visitlist.append(self.currentVertex)
				self.findEdges(legalDir)
				lab.north()
				
			#We can go west and the tile is not visited	
			elif legalDir[2][1] == 'tile' and (self.x-1, self.y) not in self.visitlist:
				self.x -= 1
				self.currentVertex = (self.x, self.y)
				self.superstack.append('east')
				self.visitlist.append(self.currentVertex)
				self.findEdges(legalDir)
				lab.west()
				
		
			#We can go east and the tile is not visited
			elif legalDir[3][1] == 'tile' and (self.x+1, self.y) not in self.visitlist:
				self.x += 1
				self.currentVertex = (self.x, self.y)
				self.superstack.append('west')
				self.visitlist.append(self.currentVertex)
				self.findEdges(legalDir)
				
				lab.east()
			
			#We can't go either of the cardinal directions without encountering a visited tile, we have to backtrack
			else:
				self.findEdges(legalDir)
				self.backtrack()
				
		
			
	def backtrack(self):
		'''
		Implements a backtracking function
		'''
		
		prevVertex = self.superstack.pop()
		
				
		#If the result of this subtraction is negative, we need to go south. (South is negative y-direction in a coordinate system)			(prev.y - current.y)
		if prevVertex == 'south':
			self.y -= 1
			self.currentVertex = (self.x, self.y)
			lab.south()
			
		#If the result of this subtraction is positive, we need to go north. (North is positive y-direction in a coordinate system)			(prev.y - current.y)
		elif prevVertex == 'north':
			self.y += 1
			self.currentVertex = (self.x, self.y)
			lab.north()
			
		#If the result of this subtraction is negative, we need to go west. (West is negative x-direction in a coordinate system)			(prev.x - current.x)
		elif prevVertex == 'west':
			self.x -= 1
			self.currentVertex = (self.x, self.y)
			lab.west()
			
		#If the result of this subtraction is positive, we need to go east. (East is positive x-direction in a coordinate system)			(prev.x - current.x)
		elif prevVertex == 'east':
			self.x += 1
			self.currentVertex = (self.x, self.y)
			lab.east()
			
	



if __name__ == "__main__":
	
	lab = labyrinth()
	
	solver = Solver()
	
	solver.movement()
	
	
	# Now go find toby!
	lab.cleanup()
